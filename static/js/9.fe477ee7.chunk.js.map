{"version":3,"sources":["components/Forms/UserForm.js","pages/CadastroConta/index.js"],"names":["initialValues","email","senha","nome","descricao","linkSite","avatar","UserForm","props","imageFinal","componentImage","formik","useFormik","Container","id","Form","onSubmit","e","preventDefault","values","console","log","FormGroup","Label","for","Input","type","name","placeholder","getFieldProps","value","Button","CadastroConta","useState","imgCrop","setImgCrop","imageFile","setImageFile","x","y","crop","setCrop","zoom","setZoom","getCroppedImageUrl","url","cropMask","crossOrigin","Promise","resolve","reject","img","Image","onload","onerror","setAttribute","preloadImage","then","image","canvas","document","createElement","width","height","getContext","drawImage","toDataURL","onCropComplete","useCallback","croppedArea","croppedAreaPixels","CustomInput","label","onChange","event","target","files","URL","createObjectURL","aspect","onCropChange","onZoomChange"],"mappings":"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","file":"static/js/9.fe477ee7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, Container } from 'reactstrap';\r\nimport { useFormik } from \"formik\";\r\n\r\nimport './UserForm/style.css';\r\n\r\nconst initialValues = {\r\n    email: \"\",\r\n    senha: \"\",\r\n    nome: \"\",\r\n    descricao: \"\",\r\n    linkSite: \"\",\r\n    avatar: \"\"\r\n};\r\n\r\nconst UserForm = (props) => {\r\n  const {imageFinal, componentImage} = props;\r\n  // const onSubmit = values => {};\r\n\r\n  const formik = useFormik({\r\n    initialValues\r\n  });\r\n\r\n  return (\r\n      <Container id=\"form-page\">\r\n        <h2>Cadastrar-se</h2>\r\n      <Form onSubmit={(e) => {\r\n        e.preventDefault(); \r\n        formik.values.avatar=imageFinal\r\n        console.log(formik.values)\r\n\r\n      }}>\r\n        <FormGroup>\r\n          <Label for=\"email\">Email:</Label>\r\n          <Input type=\"text\" name=\"email\" id=\"email\" placeholder=\"Digite seu email...\" {...formik.getFieldProps(\"email\")} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"senha\">Senha:</Label>\r\n          <Input type=\"password\" name=\"senha\" id=\"senha\" placeholder=\"Digite uma senha...\" {...formik.getFieldProps(\"senha\")} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"nome\">Nome da Empresa:</Label>\r\n          <Input type=\"text\" name=\"nome\" id=\"nome\" placeholder=\"Digite o nome da empresa...\" {...formik.getFieldProps(\"nome\")} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"descricao\">Descrição:</Label>\r\n          <Input type=\"textarea\" name=\"descricao\" id=\"descricao\" placeholder=\"Faça uma descrição da empresa...\" {...formik.getFieldProps(\"descricao\")} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"linkSite\">Site da Empresa:</Label>\r\n          <Input type=\"text\" name=\"linkSite\" id=\"linkSite\" placeholder=\"Link do site da empresa...\" {...formik.getFieldProps(\"linkSite\")} />\r\n        </FormGroup>\r\n        {componentImage}\r\n        <input type=\"hidden\" value={imageFinal} />\r\n        <Button>Cadastrar</Button>\r\n      </Form>\r\n      </Container>\r\n    );\r\n  };\r\n  \r\n  export default UserForm;","import React, { useState, useCallback } from 'react';\r\nimport Cropper from 'react-easy-crop';\r\nimport { FormGroup, Label, CustomInput } from 'reactstrap';\r\nimport UserForm from '../../components/Forms/UserForm';\r\n\r\nconst CadastroConta = () => {\r\n\r\n    const [imgCrop, setImgCrop] = useState('');\r\n    const [imageFile, setImageFile] = useState('');\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n    const [zoom, setZoom] = useState(1);\r\n\r\n    const preloadImage = (url, crossOrigin = 'anonymous') => (\r\n        new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n    \r\n            img.crossOrigin = crossOrigin;\r\n            img.onload = () => resolve(img);\r\n            img.onerror = reject;\r\n            img.setAttribute('src', url);\r\n        })\r\n    );\r\n\r\n    const getCroppedImageUrl = (url, cropMask) => (\r\n        preloadImage(url)\r\n            .then((image) => {\r\n                let canvas = document.createElement('canvas');\r\n                canvas.setAttribute('width', cropMask.width);\r\n                canvas.setAttribute('height', cropMask.height);\r\n    \r\n                let context = canvas.getContext('2d');\r\n                context.drawImage(image,\r\n                    cropMask.x, cropMask.y, cropMask.width, cropMask.height,\r\n                    0, 0, cropMask.width, cropMask.height\r\n                );\r\n                setImgCrop(canvas.toDataURL('image/png'))\r\n                // return (canvas.toDataURL('image/png'));\r\n            })\r\n    );\r\n\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        getCroppedImageUrl(imageFile, croppedAreaPixels)\r\n    }, [imageFile])\r\n\r\n    return(\r\n        <>\r\n        <UserForm imageFinal={imgCrop} componentImage={\r\n            <FormGroup>\r\n                <Label for=\"avatar\">Logo da Empresa:</Label>\r\n                <CustomInput \r\n                type=\"file\" \r\n                name=\"avatar\" \r\n                id=\"avatar\" \r\n                label=\"Selecione uma imagem\" \r\n                onChange={(event) => {\r\n                    if (typeof event.target.files[0] !== \"undefined\") {\r\n                        setImageFile(URL.createObjectURL(event.target.files[0]));\r\n                    } else {\r\n                        setImgCrop(\"\")\r\n                        setImageFile(\"\")\r\n                    }\r\n                }} \r\n                />\r\n                <div id=\"crop-image\">\r\n                    {imageFile && <div id=\"form-cadastro\">\r\n                        <div id=\"image_cropper\">\r\n                            <Cropper\r\n                            image={imageFile}\r\n                            crop={crop}\r\n                            zoom={zoom}\r\n                            aspect={4 / 3}\r\n                            onCropChange={setCrop}\r\n                            onCropComplete={onCropComplete}\r\n                            onZoomChange={setZoom}\r\n                            />\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            </FormGroup>\r\n        }/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CadastroConta;\r\n"],"sourceRoot":""}